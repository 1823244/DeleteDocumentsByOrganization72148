Перем тлог; //объект ЗаписьТекста для ведения текстового лога

//Обработчик кнопки "Выполнить"
&НаКлиенте
Процедура ВыполнитьУдаление(Команда)
	
	#Если Не ВебКлиент Тогда
		
		Отказ = Ложь;
		
		ТекстВопроса = "Выполнить удаление документов?";
		
		Если Объект.МодальностьРазрешена Тогда
			КодВыполнения = "
			|Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			|ВыполнитьУдалениеЗавершение(Ответ, Отказ);";
		Иначе
			Отказ = Ложь;
			КодВыполнения = "
			|Оповещение = Новый ОписаниеОповещения(""ВыполнитьУдалениеЗавершение"", ЭтаФорма);
			|ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);";
		КонецЕсли;
		
		Выполнить(КодВыполнения);
		
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьУдалениеЗавершение(Результат, Отказ = Истина) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	АдресОтвета = ПоместитьВоВременноеХранилище(Неопределено, ЭтаФорма.УникальныйИдентификатор);
	ВыполнитьУдалениеСервер( АдресОтвета );
	
	ОповеститьОЗавершении();
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОЗавершении()
	
	#Если Не ВебКлиент Тогда
		
		ЕстьОшибки = ПолучитьИзВременногоХранилища( АдресОтвета );
		
		ТекстОшибки = ?(ЕстьОшибки = Ложь, "Ошибок не было", "Были ошибки. Подробности - в логе");
		ТекстОшибкиАнгл = ?(ЕстьОшибки = Ложь, "There were no errors", "There were some errors. Please see the log-file for details");
		
		Если Объект.МодальностьРазрешена Тогда
			
			Если ОбменДаннымиЗагрузка = Истина Тогда
				ТекстТИИ = " После удаления запустите Тестирование и Исправление, чтобы очистить движения документов!";
			Иначе
				ТекстТИИ = "";
			КонецЕсли;
			
			
			КодВыполнения = "
			|Предупреждение(""Удаление завершено!""+ТекстОшибки+"". ""+ТекстТИИ);";
		Иначе
				
			Если ОбменДаннымиЗагрузка = Истина Тогда
				КодВыполнения = "
				|ПоказатьПредупреждение(,НСтр(""ru = 'Удаление завершено! ""+ТекстОшибки+"". После удаления запустите Тестирование и Исправление, чтобы очистить движения документов!'; en = 'documents has been deleted! ""+ТекстОшибкиАнгл+"". Now you need to run Test and Repair function from Designer'""), 10);";
				
			Иначе
				КодВыполнения = "
				|ПоказатьПредупреждение(,НСтр(""ru = 'Удаление завершено! ""+ТекстОшибки+""'; en = 'documents has been deleted! ""+ТекстОшибкиАнгл+""'""), 10);";
			КонецЕсли;
			
		КонецЕсли;
		
		Выполнить(КодВыполнения);
		
	#КонецЕсли
	
КонецПроцедуры

//Основная функция удаления
&НаСервере
Процедура ВыполнитьУдалениеСервер( АдресОтвета )
	
	Если ФормироватьЛог = Истина Тогда
		Попытка
			тлог.Закрыть();
		Исключение
		КонецПопытки;
		Попытка
			УдалитьФайлы(ИмяФайлаЛога);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	тлог = ПолучитьЛог();
	Лог_инфо(тлог, "------------------------------------------------------");
	Лог_инфо(тлог, "Начали очистку базы по организаци "+Организация);
	Лог_инфо(тлог, "------------------------------------------------------");
	Лог_инфо(тлог, "Начали удаление документов. Организация = "+Организация);
	Лог_инфо(тлог, "Параметры");
	Лог_инфо(тлог, "Период с "+Строка(Период.ДатаНачала) + " по " + Строка(Период.ДатаОкончания));
	Лог_инфо(тлог, "Удалять непосредственно = "+строка(Непосредственно));
	Лог_инфо(тлог, "ОбменДанными.Загрузка = "+строка(ОбменДаннымиЗагрузка));
	Лог_инфо(тлог, "Сдвиг бух. итогов = "+строка(СдвинутьБухИтогиВПрошлое));
	Лог_инфо(тлог, "Сдвиг регистров накопления = "+строка(СдвинутьРегистрыНакопленияВПрошлое));
	Лог_инфо(тлог, "Удалять регистры сведений = "+строка(УдалятьРегистрыСведений));
	Лог_инфо(тлог, "Удалять справочники = "+строка(УдалятьСправочники));
	Лог_инфо(тлог, "Формировать лог в журнал регистрации = "+строка(ФормироватьЛогВЖР));
	Лог_инфо(тлог, "Событие журнала регистрации (для отбора) = "+строка(СобытиеЖР));
	Лог_инфо(тлог, "");	
	
	
	Если ЕстьДатыЗапретаИзменения( тлог ) Тогда
		
		ЗакрытьЛог();
		
		ВызватьИсключение "Очистка базы отменена, т.к. установлена дата запрета изменения. Подробности - в логе";
		
	КонецЕсли;
	
	//сдвиг итогов хозрасчетного
	БухИтогиСдвинуты = Ложь;
	Если Метаданные.РегистрыБухгалтерии.Найти("Хозрасчетный") <> Неопределено И СдвинутьБухИтогиВПрошлое = Истина Тогда
		
		ДатаИтогов = ?(ЗначениеЗаполнено(Период.ДатаНачала), НачалоМесяца(Период.ДатаНачала)-1, '20010101');
		БухИтогиСдвинуты = СдвинутьБухИтоги( ДатаИтогов );
		
	КонецЕсли;
	
	//сюда поместим регистры накопления, у которых используются не итоги, а агрегаты, чтобы правильно включить их использование после удаления документов
	СоотвРегистрыНакопленияАгрегаты = Новый Соответствие;
	
	//сдвиг итогов регистров накопления
	РегистрыНакопленияСдвинуты = Ложь;
	Если СдвинутьРегистрыНакопленияВПрошлое = Истина Тогда
		ДатаИтогов = ?(ЗначениеЗаполнено(Период.ДатаНачала), НачалоМесяца(Период.ДатаНачала)-1, '20010101');
		РегистрыНакопленияСдвинуты = СдвинутьИтогиРегНакопления( ДатаИтогов, СоотвРегистрыНакопленияАгрегаты );
	КонецЕсли;
	
	Лог_инфо(тлог, "");
	
	ЕстьОшибки = Ложь;
	
	Попытка
		//справочник, от состояния которого зависит возможность удаления документов
		УдалитьСправочникКомплектыОтчетностиПерсучета_БП(тлог);	
	Исключение
		Лог_ошибка(тлог, "Ошибка удаления справочника КомплектыОтчетностиПерсучета. Подробности: "+ОписаниеОшибки());
		ЕстьОшибки = Истина;
		Перейти ~Конец;
	КонецПопытки;
	
	Попытка
		УдалитьДокументы();
	Исключение
		Лог_ошибка(тлог, "Ошибка удаления документов. Подробности: "+ОписаниеОшибки());
		ЕстьОшибки = Истина;
		Перейти ~Конец;
	КонецПопытки;

	Лог_инфо(тлог, "");	
	Лог_инфо(тлог, "------------------------------------------------------");
	Лог_инфо(тлог, "Закончили удаление документов");
	Лог_инфо(тлог, "------------------------------------------------------");
	
	//		СДВИГ ИТОГОВ
	
	Если БухИтогиСдвинуты = Истина Тогда
		СдвинутьБухИтоги( НачалоМесяца(ТекущаяДата())-1 );
	КонецЕсли;

	Если РегистрыНакопленияСдвинуты = Истина Тогда
		ДатаИтогов = НачалоМесяца(ТекущаяДата())-1;
		РегистрыНакопленияСдвинуты = СдвинутьИтогиРегНакопления( ДатаИтогов, СоотвРегистрыНакопленияАгрегаты, Ложь );
	КонецЕсли;
	
	//		РЕГИСТРЫ СВЕДЕНИЙ
	
	Если УдалятьРегистрыСведений = Истина Тогда
		
		Попытка
			УдалитьРегистрыСведенийСервер();
		Исключение
			Лог_ошибка(тлог, "Ошибка удаления регистров сведений. Подробности: "+ОписаниеОшибки());
			ЕстьОшибки = Истина;
			Перейти ~Конец;
		КонецПопытки;
		
	КонецЕсли;
	
	//		СПРАВОЧНИКИ
	
	Если УдалятьСправочники = Истина Тогда
		
		Попытка
			УдалитьСправочникиСервер();
		Исключение
			Лог_ошибка(тлог, "Ошибка удаления справочников. Подробности: "+ОписаниеОшибки());
			ЕстьОшибки = Истина;
			Перейти ~Конец;
		КонецПопытки;
		
	КонецЕсли;
	
	
	Лог_инфо(тлог, "------------------------------------------------------");
	Лог_инфо(тлог, "Закончили очистку базы по организаци "+Организация);
	Лог_инфо(тлог, "------------------------------------------------------");
	
	
	~Конец:
	
	//	ЛОГ
	ЗакрытьЛог();
	
	ПоместитьВоВременноеХранилище(ЕстьОшибки, АдресОтвета);
	
КонецПроцедуры

Процедура ЗакрытьЛог()
	
	Если ФормироватьЛог = Истина Тогда
		тлог.Закрыть();
		ФайлСкопирован = Ложь;
		Попытка
			КопироватьФайл(ИмяФайлаЛогаВрем, ИмяФайлаЛога);
			ФайлСкопирован = Истина;
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не удалось скопировать файл лога в назначение: "+ИмяФайлаЛога+"!"+Символы.ПС+
			"Исходный файл лога: "+ИмяФайлаЛогаВрем;
			Сообщение.Сообщить();
		КонецПопытки;
		Если ФайлСкопирован = Истина Тогда
			Попытка
				УдалитьФайлы(ИмяФайлаЛогаВрем);
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура УдалитьДокументы()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач", Период.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаКон", ?(ЗначениеЗаполнено(Период.ДатаОкончания), Период.ДатаОкончания, '29990101'));
	Запрос.УстановитьПараметр("Организация", Организация);
	
	
	Для Каждого Д из Метаданные.Документы Цикл
		
		Если Д.Реквизиты.Найти("Организация")=Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		РазрешеноСтавитьПометкуНаУдаление = ПравоДоступа("ИнтерактивнаяПометкаУдаления", Метаданные.Документы[Д.Имя]);
		Если НЕ Непосредственно И Не РазрешеноСтавитьПометкуНаУдаление Тогда
			//добавить вывод в лог
			Лог_ошибка(тлог, "Справочник КомплектыОтчетностиПерсучета не удален - Нет прав на пометку удаления: "+строка(Д.Имя));
			Продолжить;
		КонецЕсли;
		
		РазрешеноУдалятьНепосредственно = ПравоДоступа("ИнтерактивноеУдаление", Метаданные.Документы[Д.Имя]);
		Если Непосредственно И Не РазрешеноУдалятьНепосредственно Тогда
			//добавить вывод в лог
			ЗаписьЖурналаРегистрации("Удаление документов", УровеньЖурналаРегистрации.Информация,,,"Нет прав на интерактивное удаление: "+строка(Д.Имя));
			Лог_ошибка(тлог, "Справочник КомплектыОтчетностиПерсучета не удален - Нет прав на интерактивное удаление: "+строка(Д.Имя));
			Продолжить;
		КонецЕсли;
		
		//ну да, запрос в цикле, а что делать :)
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Док.Ссылка КАК Ссылка,
		|	1 КАК СсылкаПредставление
		|ИЗ
		|	Документ.АвансовыйОтчет КАК Док
		|ГДЕ
		|	Док.Дата МЕЖДУ &ДатаНач И &ДатаКон
		|	И &УсловиеУдален
		|	И &УсловиеОрганизация
		|
		|УПОРЯДОЧИТЬ ПО
		|	Док.Дата";
		
		Если ЗначениеЗаполнено(Организация) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОрганизация", "Док.Организация = &Организация");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОрганизация", "ИСТИНА");
		КонецЕсли;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "1 КАК", "ПРЕДСТАВЛЕНИЕ(Док.Ссылка) КАК");
		Если Непосредственно Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеУдален", "ИСТИНА");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеУдален", "Док.ПометкаУдаления = ЛОЖЬ");
		КонецЕсли;
		
		//Это чтобы можно быть текст запрос открывать в конструкторе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "АвансовыйОтчет", Д.Имя);
		
		Рез = Запрос.Выполнить();
		Если Рез.Пустой() Тогда
			Продолжить;
		КонецЕсли;
		
		
		//документы
		Выборка = Рез.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			//добавить вывод в лог
			
			ъ = Выборка.Ссылка.ПолучитьОбъект();
			
			ъ.ОбменДанными.Загрузка = ОбменДаннымиЗагрузка;
			
			ВыполнитьУдалениеОбъекта(тлог, ъ, Выборка.СсылкаПредставление, "документ");
			
		КонецЦикла;
			
	КонецЦикла;	 //по документам из метаданных
	
КонецПроцедуры

// Удаляет один оъект с записью в лог
//Пример использования:
//	ВыполнитьУдалениеОбъекта(тлог, ъ, Выборка.СсылкаПредставление, "документ")
//
&НаСервере
Процедура ВыполнитьУдалениеОбъекта(тлог, ъ, Представление, ВидОбъекта = "документ")

	
	Если Непосредственно Тогда
		Попытка
			ъ.Удалить();
			Лог_инфо(тлог, "Удаление."+ВидОбъекта+". Удален непосредственно: "+Представление);
		Исключение
			Лог_ошибка(тлог, "Удаление."+ВидОбъекта+". Ошибка удаления непосредственно: "+Представление+". Описание ошибки: "+ОписаниеОшибки());
		КонецПопытки;
		
	Иначе	
		
		Если ОбменДаннымиЗагрузка = Истина Тогда
			Попытка
				ъ.ПометкаУдаления = Истина;
				Если ВидОбъекта = "документ" Тогда
					ъ.Проведен = Ложь;
				КонецЕсли;
				ъ.Записать();
				Лог_инфо(тлог, "Удаление."+ВидОбъекта+". Помечен на удаление: "+Представление);
			Исключение
				Лог_Ошибка(тлог, "Удаление."+ВидОбъекта+". Ошибка пометки на удаление: "+Представление+". Подробности: "+ОписаниеОшибки());
			КонецПопытки;
		Иначе
			
			Попытка
				ъ.УстановитьПометкуУдаления(Истина);
				Лог_инфо(тлог, "Удаление."+ВидОбъекта+". Помечен на удаление: "+Представление);
			Исключение
				Лог_ошибка(тлог, "Удаление."+ВидОбъекта+". Ошибка пометки на удаление: "+Представление+". Подробности: "+ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;	

КонецПроцедуры

&НаСервере
Функция СдвинутьБухИтоги( ДатаИтогов )
	
	//сдвиг итогов хозрасчетного
	БухИтогиСдвинуты = Ложь;
	Лог_инфо(тлог, "Включен режим сдвига бух. итогов");
	Лог_инфо(тлог, "Начали сдвиг БухИтогов на "+формат(ДатаИтогов, "ДФ=дд.ММ.гггг"));
	Попытка
		РегистрыБухгалтерии.Хозрасчетный.УстановитьПериодРассчитанныхИтогов(ДатаИтогов);
		БухИтогиСдвинуты = Истина;
		Лог_инфо(тлог, "БухИтоги сдвинуты на "+формат(ДатаИтогов, "ДФ=дд.ММ.гггг"));
		Возврат Истина;
	Исключение
		Лог_ошибка(тлог, "БухИтоги НЕ сдвинуты на "+формат(ДатаИтогов, "ДФ=дд.ММ.гггг")+". Причина: "+ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

&НаСервере
Функция СдвинутьИтогиРегНакопления( ДатаИтогов, СоотвРегистрыНакопленияАгрегаты, РежимОтключения = Истина )

	Лог_инфо(тлог, "Включен режим сдвига итогов регистров накопления");
	
	Для Каждого Рег Из Метаданные.РегистрыНакопления Цикл
		Если Строка(Метаданные.РегистрыНакопления[Рег.Имя].ВидРегистра) = "Остатки" Тогда //почему-то ругается на ВидРегистраНакопления.Остатки...
			Лог_инфо(тлог, "Начали сдвиг итогов регистра накопления (остатки) "+Рег.Имя+" на "+формат(ДатаИтогов, "ДФ=дд.ММ.гггг"));
			Попытка
				РегистрыНакопления[Рег.Имя].УстановитьПериодРассчитанныхИтогов(ДатаИтогов);
				Лог_инфо(тлог, "Итоги сдвинуты на "+формат(ДатаИтогов, "ДФ=дд.ММ.гггг"));
			Исключение
				Лог_ошибка(тлог, "Итоги НЕ сдвинуты на "+формат(ДатаИтогов, "ДФ=дд.ММ.гггг")+". Причина: "+ОписаниеОшибки());
				Возврат Ложь;
			КонецПопытки;
			
		Иначе
			//запомним регистры оборотов с агрегатами
			Если РегистрыНакопления[Рег.Имя].ПолучитьРежимАгрегатов() = Истина Тогда
				СоотвРегистрыНакопленияАгрегаты.Вставить(Рег.Имя, Истина);
			КонецЕсли;
			Если СоотвРегистрыНакопленияАгрегаты.Получить(Рег.Имя) = Неопределено Тогда
				Лог_инфо(тлог, "Начали отключение итогов регистра накопления (обороты) "+Рег.Имя+" на "+формат(ДатаИтогов, "ДФ=дд.ММ.гггг"));
				Попытка
					РегистрыНакопления[Рег.Имя].УстановитьИспользованиеИтогов( ?(РежимОтключения = Истина, Ложь, Истина) );
					Лог_инфо(тлог, "Итоги отключены.");
				Исключение
					Лог_ошибка(тлог, "Итоги НЕ отключены. Причина: "+ОписаниеОшибки());
					Возврат Ложь;
				КонецПопытки;
			Иначе
				Лог_инфо(тлог, "Начали отключение агрегатов регистра накопления "+Рег.Имя+" на "+формат(ДатаИтогов, "ДФ=дд.ММ.гггг"));
				Попытка
					РегистрыНакопления[Рег.Имя].УстановитьИспользованиеАгрегатов ( ?(РежимОтключения = Истина, Ложь, Истина) );
					Лог_инфо(тлог, "Агрегаты отключены.");
				Исключение
					Лог_ошибка(тлог, "Агрегаты НЕ отключены. Причина: "+ОписаниеОшибки());
					Возврат Ложь;
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
	
КонецФункции

//Этот справочник надо выделить особо. Если его не удалить перед удалением документов, то 
//будет возникать ошибка
//06.11.2017 16:52:33 Не удалось удалить Комплект №1 за 1 кв. 2016 г. по причине 
//{ВнешняяОбработка.УдалитьВсеДокументыПоФирме82УФ.Форма.Форма.Форма(767)}: 
//Ошибка при вызове метода контекста (УстановитьПометкуУдаления): Ошибка при выполнении обработчика - 'ПередЗаписью':
//{Справочник.КомплектыОтчетностиПерсучета.МодульОбъекта(6209)}: Ошибка при вызове метода контекста 
//(УстановитьПометкуУдаления): Ошибка при выполнении обработчика - 'ПередЗаписью':
//{Справочник.КомплектыОтчетностиПерсучета.МодульМенеджера(1695)}: 
//Документ входит в комплект отчетности, сведения которого разнесены по лицевым счетам. Отмена проведения запрещена.
//
//Параметры
//	тлог - ЗаписьТекста - запись в лог
&НаСервере
Процедура УдалитьСправочникКомплектыОтчетностиПерсучета_БП(тлог)

	а = метаданные.НайтиПоПолномуИмени("Справочник.КомплектыОтчетностиПерсучета");
	Если а = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Лог_инфо(тлог, "Удаление справочника КомплектыОтчетностиПерсучета - начало");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Спр.Ссылка КАК Ссылка,
		|	1 КАК СсылкаПредставление
		|ИЗ
		|	Справочник.КомплектыОтчетностиПерсучета КАК Спр
		|ГДЕ
		|	Спр.Организация = &Организация
		|	И &УсловиеУдален
		|	И &УсловиеОрганизация";
	
		Если ЗначениеЗаполнено(Организация) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОрганизация", "Спр.Организация = &Организация");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОрганизация", "ИСТИНА");
		КонецЕсли;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "1 КАК", "ПРЕДСТАВЛЕНИЕ(Спр.Ссылка) КАК");
		Если Непосредственно Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеУдален", "ИСТИНА");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеУдален", "Спр.ПометкаУдаления = ЛОЖЬ");
		КонецЕсли;
		
		
		
	Запрос.УстановитьПараметр("Организация", Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	
	
	Пока Выборка.Следующий() Цикл
		
		ъ = Выборка.Ссылка.ПолучитьОбъект();
		
		ъ.ОбменДанными.Загрузка = Истина; //иначе сработает проверка ПередЗаписью() и не даст удалить
		
		//обязательно нужно сменить состояние комплекта!
		ъ.СостояниеКомплекта = Перечисления.СостояниеКомплектаОтчетностиПерсучета.СведенияНеСформированы;
		
		ъ.записать();
		
		ВыполнитьУдалениеОбъекта(тлог, ъ, Выборка.СсылкаПредставление, "справочник");
		
		
	КонецЦикла;
	

	Лог_инфо(тлог, "Удаление справочника КомплектыОтчетностиПерсучета - конец");
	
КонецПроцедуры

//	Регистры сведений

&НаСервере
Процедура УдалитьРегистрыСведенийСервер()
	
	тлог = ПолучитьЛог();
	Лог_инфо(тлог, "----------------------------------");
	Лог_инфо(тлог, "Начали удаление регистров сведений");
	Лог_инфо(тлог, "----------------------------------");
	
	мОрганизации = Новый Массив;
	мОрганизации.Добавить(Организация);
	
	мВключитьОбъекты = Новый Массив;
	Для сч = 0 По Метаданные.РегистрыСведений.Количество()-1 Цикл
		мВключитьОбъекты.Добавить(Метаданные.РегистрыСведений.Получить(сч).ПолноеИмя());
	КонецЦикла;
	
	тзСсылки = ПолучитьСсылкиНаОрганизации( мОрганизации, мВключитьОбъекты );
	тзСсылки.Свернуть("Метаданные","");
	
	Для Каждого МД из тзСсылки Цикл
		
		Попытка
			НаборЗаписей = РегистрыСведений[МД.Метаданные.Имя].СоздатьНаборЗаписей();
		Исключение
			//иногда проскакивают не регистры сведений. почему - не понятно :(
			Лог_инфо(тлог, "В поле Метаданные таблицы ссылок находится не регистр сведений! Там находится: "+МД.Метаданные.Имя+", тип "+ТипЗнч(МД.Метаданные));
			продолжить;
		КонецПопытки;
		попытка
			НаборЗаписей.Отбор.Организация.Установить(Организация);
			НаборЗаписей.Записать();
			Лог_инфо(тлог, "Организация "+строка(Организация)+" удалена из регистра сведений "+МД.Метаданные.Имя);
		Исключение
			Лог_инфо(тлог, "В регистре сведений "+МД.Метаданные.Имя+" нет измерения Организация");
			
			Для Каждого Изм из МД.Метаданные.Измерения Цикл
				Если Изм.Тип.СодержитТип(Тип("СправочникСсылка.Организации")) Тогда
					Лог_инфо(тлог, "В регистре сведений "+МД.Метаданные.Имя+" измерение "+Изм.Имя+" содержит тип СправочникСсылка.Организации");
					НаборЗаписей.Отбор[Изм.Имя].Установить(Организация);
					НаборЗаписей.Записать();
					Лог_инфо(тлог, "		Организация "+строка(Организация)+" удалена из регистра сведений "+МД.Метаданные.Имя);
				КонецЕсли;
			КонецЦикла;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Лог_инфо(тлог, "----------------------------------");
	Лог_инфо(тлог, "Закончили удаление регистров сведений");
	Лог_инфо(тлог, "----------------------------------");
		
	
КонецПроцедуры

//	Справочники

&НаСервере
Процедура УдалитьСправочникиСервер()
	
	тлог = ПолучитьЛог();
	Лог_инфо(тлог, "----------------------------");
	Лог_инфо(тлог, "Начали удаление справочников");
	Лог_инфо(тлог, "----------------------------");
	
	мОрганизации = Новый Массив;
	мОрганизации.Добавить(Организация);
	
	//чтобы можно было удалять банк счета, нужно сначала пометить организацию
	Если Организация.ПометкаУдаления = Ложь Тогда
		ОргОбъект = Организация.ПолучитьОбъект();
		ОргОбъект.ПометкаУдаления = Истина;
		ОргОбъект.Записать();
	КонецЕсли;
	
	мВключитьОбъекты = Новый Массив;
	Для сч = 0 По Метаданные.Справочники.Количество()-1 Цикл
		мВключитьОбъекты.Добавить(Метаданные.Справочники.Получить(сч));
	КонецЦикла;
	
	тзСсылки = ПолучитьСсылкиНаОрганизации( мОрганизации, мВключитьОбъекты );
	тзСсылки.Индексы.Добавить("Метаданные");
	
	// для масштабируемости
	ТЗМетаданных = ПолучитьТаблицуВидовМетаданных( тзСсылки );
	
	Для Каждого МД из ТЗМетаданных Цикл
		Если Непосредственно Тогда
			Если ПравоДоступа("ИнтерактивноеУдаление", МД.Метаданные) = Ложь Тогда
				Лог_инфо(тлог, "Нет прав на интерактивное удаление: "+МД.Метаданные.ПолноеИмя());
				Продолжить;
			КонецЕсли;
		Иначе
			Если ПравоДоступа("ИнтерактивнаяПометкаУдаления", МД.Метаданные) = Ложь Тогда
				Лог_ошибка(тлог, "Нет прав на пометку удаления: "+МД.Метаданные.Имя);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Отбор = Новый Структура("Метаданные", МД.Метаданные);
		СтрокиТЗссылок = тзСсылки.НайтиСтроки( Отбор );
		
		Лог_инфо(тлог, "Удаляем объекты вида: "+МД.Метаданные.ПолноеИмя());
		
		Для Каждого Об из СтрокиТЗссылок Цикл

			ъ = Об.Данные.ПолучитьОбъект();
			
			ъ.ОбменДанными.Загрузка = ОбменДаннымиЗагрузка;
			
			ПредставлениеОбъекта = строка(ъ);
			
			ВыполнитьУдалениеОбъекта(тлог, ъ, ПредставлениеОбъекта, "справочник");
			
		КонецЦикла;
		
		Лог_инфо(тлог, "Закончили удалять объекты вида: "+МД.Метаданные.ПолноеИмя());
		
	КонецЦикла;
		
	
	Лог_инфо(тлог, "----------------------------------");
	Лог_инфо(тлог, "Закончили удаление справочников");
	Лог_инфо(тлог, "----------------------------------");
	
	
КонецПроцедуры

//Интерфейс

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Об = РеквизитФормыВЗначение("Объект");
	
	СисИнфо = Новый СистемнаяИнформация;
	Объект.ВерсияПриложения = СисИнфо.ВерсияПриложения;
	
	Если Лев(Объект.ВерсияПриложения, 3) = "8.2" Тогда
		Объект.МодальностьРазрешена = Истина;
	Иначе
		Выполнить("Объект.МодальностьРазрешена = Метаданные.РежимИспользованияМодальности = Метаданные.СвойстваОбъектов.РежимИспользованияМодальности.Использовать;");
	КонецЕсли;
	
	// создаем объект ЗаписьТекста
	тлог = ПолучитьЛог();
	
КонецПроцедуры

&НаКлиенте
Процедура ФормироватьТекстовыйЛогПриИзменении(Элемент)
	Если ФормироватьЛог Тогда
		
	Иначе
		
	КонецЕсли;
	УправлениеВидимостьюФайлаЛога();
КонецПроцедуры

&НаКлиенте
Процедура УправлениеВидимостьюФайлаЛога()
	Если ФормироватьЛог Тогда
		Элементы.ИмяФайлаЛога.Видимость = Истина;
	Иначе
		Элементы.ИмяФайлаЛога.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УправлениеВидимостьюФайлаЛога();
КонецПроцедуры

//		ВЫБОР ФАЙЛА БЕЗ МОДАЛЬНОСТИ

&НаКлиенте
Процедура ОбработатьВыборФайлаЛога(ВыбранныеФайлы,ДополнительныеПараметры) Экспорт 
	
	Если ТипЗнч(ВыбранныеФайлы)=Тип("Массив") Тогда
		ИмяФайлаЛога = ВыбранныеФайлы[0];
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаЛогаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	// Вызываем диалог выбора
	ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ВыборФайла.Заголовок                 = "Выберите файл лога";
	    
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборФайлаЛога", ЭтаФорма);
	ВыборФайла.Показать (ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаЛогаОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЗапуститьПриложение(ИмяФайлаЛога);
КонецПроцедуры

//		ВЫБОР ФАЙЛА БЕЗ МОДАЛЬНОСТИ КОНЕЦ

//Лог

&НаСервере
Процедура Лог( тлог, сообщение, УровеньЖурналаРегистрацииПараметр )
	
	Если ФормироватьЛог Тогда Уровень = ?( УровеньЖурналаРегистрацииПараметр = УровеньЖурналаРегистрации.Информация, "ИНФОРМАЦИЯ", "ОШИБКА" );стрЛог = Формат(ТекущаяДата(),"ДФ=ддММгггг чч:мм:сс") + " " + Уровень + " " + сообщение;попытка тлог.ЗаписатьСтроку(стрЛог);исключение тлог = ПолучитьЛог();тлог.ЗаписатьСтроку(стрЛог);КонецПопытки;КонецЕсли;Если ФормироватьЛогВЖР Тогда ЗаписьЖурналаРегистрации(СобытиеЖР, УровеньЖурналаРегистрацииПараметр,,,сообщение);КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура Лог_инфо(тлог, сообщение)
	
	Лог( тлог, сообщение, УровеньЖурналаРегистрации.Информация );
	
КонецПроцедуры

&НаСервере
Процедура Лог_ошибка(тлог, сообщение)
	
	Лог( тлог, сообщение, УровеньЖурналаРегистрации.Ошибка );
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЛог()
	
	Если тлог<>Неопределено Тогда
		Возврат тлог;
	КонецЕсли;
	//сначала лог ведем во временном файле. в конце процедуры, если пользователь включил флажок ФормироватьЛог, копируем временный файл туда, куда он указал
	//мФайлы = НайтиФайлы(ИмяФайлаЛогаВрем); 
	//Если мФайлы.Количество() = 0 Тогда
		ИмяФайлаЛогаВрем = ПолучитьИмяВременногоФайла("txt");
		тлог = Новый ЗаписьТекста(ИмяФайлаЛогаВрем, КодировкаТекста.ANSI);
	//Иначе
	//	тлог = Новый ЗаписьТекста();
	//	тлог.Открыть(ИмяФайлаЛога,КодировкаТекста.ANSI,,Истина);
	//КонецЕсли;
	Возврат тлог;
КонецФункции

//	Хелперы

Функция ПолучитьТаблицуВидовМетаданных( тзСсылки )
	
	ТЗМетаданные = Новый ТаблицаЗначений;
	ТЗМетаданные.Колонки.Добавить("Метаданные");
	ТЗМетаданные.Индексы.Добавить("Метаданные");
	
	
	Для каждого Стр Из тзСсылки Цикл
		Если ТЗМетаданные.Найти(Стр.Метаданные, "Метаданные") = Неопределено Тогда
			НовСтр = ТЗМетаданные.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, Стр);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТЗМетаданные;
		
КонецФункции

// Возвращает таблицу значений со ссылками на спр Организации
// Параметры
//	мОрганизации - массив - справочник Организации
//	мВключитьОбъекты - массив - область поиска ссылок на организацию.
//
&НаСервере
Функция ПолучитьСсылкиНаОрганизации( мОрганизации, мВключитьОбъекты )
	
	Перем тзСсылки;
	
	СистемнаяИнформация = Новый СистемнаяИнформация ;
	Версия = Лев(СистемнаяИнформация.ВерсияПриложения,3);
	Если Версия = "8.0" ИЛИ
		Версия = "8.1"  ИЛИ
		Версия = "8.2" Тогда
		КодДляВыполнения = "тзСсылки = НайтиПоСсылкам(мОрганизации);";
	ИначеЕсли Версия = "8.3" Тогда
		КодДляВыполнения = "ОблПоиска = Новый Массив; мИсключитьОбъекты = Новый Массив; тзСсылки = НайтиПоСсылкам(мОрганизации,ОблПоиска,мВключитьОбъекты,мИсключитьОбъекты);";
	Иначе
		ВызватьИсключение "Неопознанная версия платформы 1С! Ожидается 8.0/1/2/3";
	КонецЕсли;	
	
	Выполнить КодДляВыполнения ;
	
	Возврат тзСсылки;
		
КонецФункции

&НаСервере
Функция ЭтоВерсия83()
	
	СистемнаяИнформация = Новый СистемнаяИнформация ;
	Версия = Лев(СистемнаяИнформация.ВерсияПриложения,3);
	Если Версия = "8.3" Тогда
		
		Возврат Истина;
		
	Иначе
		Возврат Ложь;
	КонецЕсли;	
		
КонецФункции


Функция ЕстьДатыЗапретаИзменения( тлог )
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	ДатыЗапретаИзменения.Раздел КАК Раздел,
	//|	ДатыЗапретаИзменения.Объект КАК Объект,
	//|	ДатыЗапретаИзменения.Пользователь КАК Пользователь,
	//|	ДатыЗапретаИзменения.ДатаЗапрета КАК ДатаЗапрета,
	//|	ДатыЗапретаИзменения.ОписаниеДатыЗапрета КАК ОписаниеДатыЗапрета
	//
	//|ИЗ
	//|	РегистрСведений.ДатыЗапретаИзменения КАК ДатыЗапретаИзменения";
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//
	//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//	// Вставить обработку выборки ВыборкаДетальныеЗаписи
	//КонецЦикла;

	//
	//// Перечисления.ВидыНазначенияДатЗапрета.ДляВсехПользователей
	
	ДанныеДляПроверки = ДатыЗапретаИзменения.ШаблонДанныхДляПроверки();
	НовСтр = ДанныеДляПроверки.добавить();
	НовСтр.Дата = Период.ДатаНачала;
	
	ОписаниеЗапретов = "";
	
	ОписаниеДанных = Новый Структура("НоваяВерсия,Данные",Ложь,Организация);
	                          	
	ЕстьЗапрет = ДатыЗапретаИзменения.НайденЗапретИзмененияДанных( ДанныеДляПроверки, ОписаниеДанных, ОписаниеЗапретов );
	
	Если ЕстьЗапрет Тогда
		лог_ошибка(тлог, "Очистка базы отменена, т.к. установлена дата запрета изменения. Подробности - ниже");
		лог_ошибка(тлог, ОписаниеЗапретов);
	КонецЕсли;
	
	Возврат ЕстьЗапрет;
		
КонецФункции


СобытиеЖР = "УдалениеДокументовПоОрганизации72148";

тлог = Неопределено; //объект ЗаписьТекста для ведения текстового лога
